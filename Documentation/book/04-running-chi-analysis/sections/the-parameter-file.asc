=== The parameter file

The parameter file has keywords followed by a value. The format of this file is similar to the files used in the `LSDTT_analysis_from_paramfile` program, which you can read about in the section <<Running your first analysis>>.

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

The parameter file has keywords followed by the `:` character. After that there is a space and the value. 

.Chi mapping parameter file format
************************************************
. Lines beginning with `#` are comments.
. Keywords or phrases are followed by a colon (`:`).
. The order of the keywords do not matter.
. Keywords are not sensitive, but must match expected keywords.
. If a keyword is not found, a default value is assigned.
************************************************


=== Parameter file options

Below are options for the parameter files. Note that all DEMs must be in ENVI `bil` format (**DO NOT** use ArcMap's bil format: these are two different things. See the section <<Preparing your data>> if you want more details). 
The reason we use `bil` format is because it retains georeferencing which is essential to our file output since many of the files output to `csv` format with latitude and longitude as coordinates. 


==== Basic file input and output

[cols="1,1,2", options="header"]
.File input and output options. **These do not have defaults and MUST be declared**.
|===
|Keyword
|Input type
|Description

|write path
|string
|The path to which data is written. **The code will NOT create a path: you need to make the write path before you start running the program.**

|read path
|string
|The path from which data is read.

|write fname
|string
|The prefix of rasters to be written *without extension*.
For example if this is `Test` and you have selected `bil` format then a fill operation will result in a file called `Test_Fill.bil`.

|read fname
|string
|The filename of the raster to be read without extension. For example if the raster is `MyRaster.bil`, read fname will be `MyRaster`.


|channel heads fname
|string
|The filename of a channel heads file. You can import channel heads. If this is set to `NULL` then the channels will be calculated using a pixel threshold. 

|===

==== DEM preprocessing

[cols="1,1,1,2", options="header"]
.DEM preprocessing. These just help you clean data and perform very basic operations.
|===
|Keyword
|Input type
|Default value
|Description


|minimum_elevation
|float
|0
|If you have the `remove_seas` keyword set to true, the program will change any elevation node below this value to NoData.

|maximum_elevation
|float
|30000
|If you have the `remove_seas` keyword set to true, the program will change any elevation node above this value to NoData.

|remove_seas
|bool
|false
|If true, this changes extreme value in the elevation to NoData.

|min_slope_for_fill
|float
|0.001
|The minimum slope between pixels for use in the fill function. 

|raster_is_filled
|bool
|false
|If true, the code assumes the raster is already filled and doesn't perform the filling routine. This should save some time in computation, but make sure the raster really is filled or else you will get segmentation faults!

|only_check_parameters
|bool
|false
|If true, this checks parameter values but doesn't run any analyses. Mainly used to see if raster files exist. 

|===


==== Selecting channels and basins

[cols="1,1,1,3", options="header"]
.Options for determining which channels and basins to analyse, including settings for the fill function.
|===
|Keyword
|Input type
|Default value
|Description

|CHeads_file
|string
|NULL
|This reads a channel heads file. It will supercede the `threshold_contributing_pixels` flag. That is, if you give a valid CHeads filename the code will ignore the threshold pixels and use the sources in the file instead. You can calculate channel heads using our https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction[channel extraction tools]. The file needs to be a *csv* file and you pass the filename *WITHOUT EXTENSION*. The format of the filename is one with 5 columns: `node_index,row,col,x,y`. The `x,y` coordinates are in local UTM coordinates.  

|threshold_contributing_pixels
|int
|1000
|The number of pixels required to generate a channel (i.e., the source threshold).

|minimum_basin_size_pixels
|int
|5000
|The minimum number of pixels in a basin for it to be retained. This operation works on the baselevel basins: subbasins within a large basin are retained. 

|maximum_basin_size_pixels
|int
|500000
|The maximum number of pixels in a basin for it to be retained. This is only used by `find_complete_basins_in_window` but that algorithm for selecting basins is the default. 

|extend_channel_to_node_before_receiver_junction
|bool
|true
|If true, the channel network will extend beyond selected baselevel junctions downstream until it reaches the pixel before the receiver junction. If false, the channel simply extends upstream from the selected basin. The reason for this switch is because if one if extracting basins by drainage order, then the, say, a 2nd order drainage basin starts at the node immediately upstream of the most upstream 3rd order junction. 

|find_complete_basins_in_window
|bool (true or 1 will work)
|true
|**THIS IS THE DEFAULT METHOD! If you don't want this method you need to set it to false.** If this is true, it i) Gets all the basins in a DEM and takes those between the `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then removes basins that are influenced by the edge of the DEM, and then removes nested basins. The reason for removing basins draining the edge is that all chi and S-A analysis requires that the basin is complete. If not, your area, and therefore chi coordinate, will be incorrect. 

|find_largest_complete_basins
|bool (true or 1 will work)
|false
|A boolean that, if set to true, will got through each baselevel node on the edge of the DEM and work upstream to keep the largest basin that is not influenced on its edge by nodata. **This only operates if `find_complete_basins_in_window` is set to false!** 

|test_drainage_boundaries
|bool (true or 1 will work)
|true
|A boolean that, if set to true, will eliminate basins with pixels drainage from the edge. This is to get rid of basins that may be truncated by the edge of the DEM (and thus will have incorrect chi values). **This only operates if BOTH `find_complete_basins_in_window` and `find_largest_complete_basins` are set to false!, OR if you are using a baselevel junctions file.** 

|only_take_largest_basin
|bool (true or 1 will work) 
|false
|If this is true, a chi map is created based only upon the largest basin in the raster. 

|print_basin_raster
|bool
|false
|If true, prints a raster with the basins. *IMPORTANT!* This should be set to true if you want to use any of our https://github.com/LSDtopotools/LSDMappingTools[python plotting functions] that use basin information. Note that if this is true it will also print csv files with basin numbers and source numbers to assist plotting.  

|===


==== Basic data output (before calculating chi)

[cols="1,1,1,2", options="header"]
.Basic printing operations. For simple rasters and network data that doesn't require chi analysis.
|===
|Keyword
|Input type
|Default value
|Description

|convert_csv_to_geojson
|bool
|false
|If true, this converts any csv file (except for slope-area data) to geojson format. This format takes up much more space than csv (file sizes can be 10x larger) but is georeferenced and can be loaded directly into a GIS. Also useful for webmapping. It assumes your raster is in UTM coordinates, and prints points with latitude and longitude in WGS84. 

|print_raster_without_seas
|bool
|false
|If true, prints a raster that has removed the seas (and very high peaks). This is useful if your NoDataValue is not registering and you use the `minimum_elevation`, `maximum_eleation`, and `remove_seas` flags to correct this. *WARNING!* This overwrites your original raster. 

|print_stream_order_raster
|bool
|false
|If true, prints the stream order raster (but printing this to csv is more efficient, use `print_channels_to_csv`).

|print_channels_to_csv
|bool
|false
|Prints the channel network to a csv file. Includes stream order and other useful information. Much more memory efficient than printing the whole raster. It prints *all* channel nodes across the DEM rather than printing nodes upstream of selected basins. *If you want to see the channels selected for chi analysis use `print_chi_data_maps`.*

|print_junction_index_raster
|bool
|false
|If true, prints the junction index raster (but printing this to csv is more efficient, use `print_junctions_to_csv`).

|print_junctions_to_csv
|bool
|false
|Prints the junction indices to a csv file. Much more memory efficient than printing the whole raster. 

|print_fill_raster
|bool
|false
|If true, prints the fill raster.

|print_DrainageArea_raster
|bool
|false
|If true, prints the drainage area raster (units are m^2^).

|write_hillshade
|bool
|false
|If true, prints the hillshade raster. The format of this is stupidly different from other printing calls for a stupid inheritance reason. Try to ignore. Most GIS routines have a hillshading options but for some reason they look crappier than our in-house hillshading. I'm not sure why but if you want a hillshade I recommend using this function. 
|===




==== Basic parameters for the chi coordinate


[cols="1,1,1,2", options="header"]
.Parameters for calculating the chi coordinate.
|===
|Keyword
|Input type
|Default value
|Description

|A_0
|float
|1
|The _A~0~_ parameter (which nondimensionalises area) for chi analysis. This is in m^2^. Note that when _A~0~_ = 1 then the slope in chi space is the same as the channel steepness index (often denoted by _k~s~_). 

|m_over_n
|float
|0.5
|The _m/n_ parameter (sometimes known as the concavity index) for calculating chi. Note that if you do any _m/n_ analysis (either `calculate_MLE_collinearity` or `print_profiles_fxn_movern_csv`) this _m/n_ value will be replaced.

|threshold_pixels_for_chi
|int
|0
|For most calculations in the *chi_mapping_tool* chi is calculated everywhere, but for some printing operations, such as printing of basic chi maps (`print_simple_chi_map_with_basins_to_csv`, `print_chi_coordinate_raster`, `print_simple_chi_map_to_csv`) you don't want chi everywhere (this is especially true when writing a simple csv file) so we have this parameter that sets chi to NoData below these threshold contributing pixels. If this is greater than `threshold_contributing_pixels` it will default to `threshold_contributing_pixels`.   

|basic_Mchi_regression_nodes
|int
|11
|This works with the basic chi map: segments are not calculated. Instead, a moving window, with a length set by this parameter, is moved over the channel nodes to calculate the chi slope. This method is very similar to methods used to calculate normalised channel steepness (_k~sn~_).

|===


==== Burning rasters to csv

In some circumstances you might want to "burn" secondary data onto your data of the channel network. One example would be if you had a geologic map and wanted to add the rock type as a column to point data about your channels. These routines will take a raster and will add the data values from that raster to each point in the chi data. 

NOTE: At the moment the burning function only works for the `print_chi_data_maps` routine. 

[cols="1,1,1,2", options="header"]
.Parameters for burning a raster to csv files.
|===
|Keyword
|Input type
|Default value
|Description

|burn_raster_to_csv
|bool
|false
|If true, takes raster data and appends it to csv data of channel points. 

|burn_raster_prefix
|string
|NULL
|The prefix of the raster (without the `bil` extension) that contains the data to be burned. Does not include the directory path. The raster *MUST* be in the same directory as your input DEM. 


|burn_data_csv_column_header
|string
|burned_data
|The column header for your burned data. If you want our python plotting tools to be happy, *do not give this a name with spaces*. 

|===


==== Parameters for exploring the _m/n_ ratio with chi analysis

[cols="1,1,1,2", options="header"]
.Parameters for trying to constrain the _m/n_ ratio using chi analysis
|===
|Keyword
|Input type
|Default value
|Description


|start_movern
|float
|0.1
|In several of the _m/n_ testing functions, the program starts at this _m/n_ value and then iterates through a number of increasing _m/n_ values, calculating the goodness of fit to each one.

|delta_movern
|float
|0.1
|In several of the _m/n_ testing functions, the program increments _m/n_ by this value.

|n_movern
|int
|8
|In several of the _m/n_ testing functions, the program increments _m/n_ this number of times. 

|only_use_mainstem_as_reference
|bool
|true
|If true this compares the goodness of fit between the mainstem and all tributaries in each basin for each _m/n_ value. If false, it compares *all* tributaries and the main stem to every other tributary.  


|calculate_MLE_collinearity
|bool
|false
|If true loops though every _m/n_ value and calculates the goodness of fit between tributaries and the main stem. It reports back both MLE and RMSE values. Used to determine _m/n_ ratios. This uses *ALL* nodes in the channel network. The effect is that longer channels have greater influence of the result than small channels. 

|calculate_MLE_collinearity_with_points
|bool
|false
|If true loops though every _m/n_ value and calculates the goodness of fit between tributaries and the main stem. It reports back both MLE and RMSE values. Used to determine _m/n_ ratios. It uses specific points on tributaries to compare to the mainstem. These are located at fixed chi distances upstream of the lower junction of the tributary. The effect is to ensure that all tributaries are weighted similarly in calculating _m/n_.

|calculate_MLE_collinearity_with_points_MC
|bool
|false
|If true loops though every _m/n_ value and calculates the goodness of fit between tributaries and the main stem. It reports back both MLE and RMSE values. Used to determine _m/n_ ratios. It uses specific points on tributaries to compare to the mainstem. The location of these points is selected at random and this process is repeated a number of times (the default is 1000) to quantify uncertainty in the best fit _m/n_ ration. 

|collinearity_MLE_sigma
|float
|1000
|A value that scales MLE. It does not affect which _m/n_ value is the most likely. However it affects the absolute value of MLE. If it is set too low, MLE values for poorly fit segments will be zero. We have performed sensitivity and found that once all channels have nonzero MLE values the most likely channel does not change. So this should be set high enough to ensure there are nonzero MLE values for all tributaries. Set this too high, however, and all MLE values will be very close to 1 so plotting becomes difficult as the difference between MLE are at many significant digits (e.g., 0.9999997 vs 0.9999996). We have found that a value of 1000 works in most situations. 

|MC_point_fractions
|int
|5
|For the `calculate_MLE_collinearity_with_points_MC` analysis, this is the number of points on each tributary to test against the main stem channel.

|MC_point_iterations
|int
|1000
|For the `calculate_MLE_collinearity_with_points_MC` analysis, this is the number iterations of drawing random points with which to build best fit _m/n_ statistics.

|max_MC_point_fraction
|float
|0.5
|The maximum fraction of the length, in chi, of the main stem that points will be measured over the tributary. For example, if the main stem has a chi length of 2 metres, then points on tributaries up to 1 metres from the confluence with the main stem will be tested by the `calculate_MLE_collinearity_with_points_MC` routine.  


|movern_residuals_test
|bool
|false
|If true loops though every _m/n_ value and calculates the mean residual between the main stem and all the tributary nodes. It is used to search for the _m/n_ value where the residual switches from negative to positive. The rationale is that the correct _m/n_ might be reflected where the mean residual is closest to zero.   

|print_profiles_fxn_movern_csv
|bool
|false
|If true this loops though every _m/n_ value and prints (to a single csv file) all the chi-elevation profiles. Used to visualise the effect of changing the _m/n_ ratio on the profiles.


|MCMC_movern_analysis
|bool
|false
|If true, runs a Monte Carlo Markov Chain analysis of the best fit _m/n_. First attempts to tune the sigma value for the profiles to get an MCMC acceptance rate of 25%, then runs a chain to constrain uncertainties. At the moment the tuning doesn't seem to be working properly!! This is also extremely computationally expensive, for a, say, 10Mb DEM analysis might last several days on a single CPU core. If you want uncertainty values for the _m/n_ ratio you should use the `calculate_MLE_collinearity_with_points_MC` routine. 

|MCMC_chain_links
|int
|5000
|Number of links in the MCMC chain

|MCMC_movern_minimum
|float
|0.05
|Minimum value of the _m/n_ ratio tested by the MCMC routine. 

|MCMC_movern_maximum
|float
|1.5
|Maximum value of the _m/n_ ratio tested by the MCMC routine. 

|===

==== Parameters for exploring the _m/n_ ratio with slope-area analysis

[cols="1,1,1,2", options="header"]
.Parameters for exploring the _m/n_ ratio with slope-area analysis
|===
|Keyword
|Input type
|Default value
|Description


|SA_vertical_interval
|float
|20
|This parameter is used for slope-area analysis. Each channel is traced downslope. A slope (or gradient) is calculated by dividing the fall in the channel elevation over the flow distance; the program aims to calculate the slope at as near to a fixed vertical interval as possible following advice of https://www.researchgate.net/profile/Eric_Kirby2/publication/228740545_Tectonics_from_topography_Procedures_promise_and_pitfalls/links/57d75a4a08ae6399a395aca6.pdf[Wobus et al 2006].

|log_A_bin_width
|float
|0.1
|This is for slope-area analysis. The raw slope-area data is always a horrendous mess. To get something that is remotely sensible you must bin the data. We bin the data in bins of the logarithm of the Area in metres^2. This is the log bin width.

|print_slope_area_data
|bool
|false
|This prints the slope-area analysis to a csv file. It includes the raw data and binned data. It is organised by both source and basin so you analyse different channels. See the section on outputs for full details. 

|segment_slope_area_data
|bool
|false
|If true, uses the segmentation algorithm in http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/abstract[Mudd et al., JGR-ES 2014] to segment the log-binned S-A data for the main stem channel.  

|slope_area_minimum_segment_length
|int
|3
|Sets the minimum segment length of a fitted segment to the S-A data. 

|bootstrap_SA_data
|bool
|false
|This bootstraps S-A data by removing a fraction of the data (set below) in each iteration and calculating the regression coefficients. It is used to estimate uncertainty, but it doesn't really work since uncertainty in regression coefficients reduces with more samples and S-A datasets have thousands of samples. Left here as a kind of monument to our futile efforts. 


|N_SA_bootstrap_iterations
|int
|1000
|Number of boostrapping iterations

|SA_bootstrap_retain_node_prbability
|float
|0.5
|Fraction of the data retained in each bootstrapping iteration.

|===



==== Parameters for segmentation of channels

[cols="1,1,1,2", options="header"]
.Parameters for calculating the segments of similar chi slope (stem:[M_{\chi}]). Details can be found in http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/abstract[Mudd et al., JGR-ES 2014].
|===
|Keyword
|Input type
|Default value
|Description

|n_iterations
|int
|20
|The number of iterations of random sampling of the data to construct segments. The sampling probability of individual nodes is determined by the skip parameter. Note that if you want to get a deterministic sampling of the segments you need to set this to 1 and set `skip` to 0. If you are using Monte Carlo sampling you should set this to at least 20 (but probably not more than 100).

|target_nodes
|int
|80
|The number of nodes in a segment finding routine. Channels are broken into subdomains of around this length and then segmenting occurs on these subdomains. This limit is required because of the computational expense of segmentation, which goes as the factorial (!!!) of the number of nodes. Select between 80-120. A higher number here will take *much* longer to compute. 

|minimum_segment_length
|int
|10
|The minimum length of a segment in sampled data nodes. The actual length is approximately this parameter times (1+skip). Note that the computational time required goes nonlinearly up the smaller this number. Note that this sets the shortest knickzone you can detect, although the algorithm can detect waterfalls where there is a jump between segments.  It should be between 6-20. 

|skip
|int
|2
|During Monte Carlo sampling of the channel network, nodes are sampled by skipping nodes after a sampled node. The skip value is the mean number of skipped nodes after each sampled node. For example, if skip = 1, on average every other node will be sampled. Skip of 0 means every node is sampled (in which case the n_iterations should be set to 1, because there will be no variation in the fit between iterations). If you want Monte Carlo sampling, set between 1 and 4. 

|sigma
|float
|10.0
|This represents the variability in elevation data (if the DEM has elevation in metres, then this parameter will be in metres). It should include both uncertainty in the elevation data as well as the geomorphic variability: the size of roughness elements, steps, boulders etc in the channel that may lead to a channel profile diverging from a smooth long profile. That is, it is not simply a function of the uncertainty of the DEM, but also a function of topographic roughness so will be greater than the DEM uncertainty. 

|n_nodes_to_visit
|int
|10
|The chi map starts with the longest channel in each basin and then works in tributaries in sequence. This parameter determines how many nodes onto a receiver channel you want to go when calculating the chi slope at the bottom of a tributary. 

|===


==== Printing of simple chi maps

For most of our visualisation routines, the key printing option to set to *true* is `print_chi_data_maps`.

[cols="1,1,1,2", options="header"]
.Options for printing simple chi maps
|===
|Keyword
|Input type
|Default value
|Description


|print_chi_coordinate_raster
|bool
|false
|If true, prints a raster with the chi coordinate (in m). Note that if you want to control the size of the data symbols in a visualisation, you should select the `print_simple_chi_map_to_csv` option. 

|print_simple_chi_map_to_csv
|bool
|false
|If true, prints a csv file with latitude, longitude and the chi coordinate. Can be converted to a GeoJSON with the flag `convert_csv_to_geojson`. This options gives more flexibility in visualisation than the raster, since in the raster data points will only render as one pixel.

|print_chi_data_maps
|bool
|false
|*This needs to be true for python visualisation.* If true, prints a raster with latitude, longitude and the chi coordinate, elevation, flow distance, drainage area, source key and baselevel keys to a csv file with the extension `_chi_data_map.csv`. Many of our https://github.com/LSDtopotools/LSDMappingTools[visualisation scripts] rely on this file.  


|===


==== Chi maps with segmentation and basin and channel selection


[cols="1,1,1,2", options="header"]
.Options for chi maps and secondary data files that split channels and basins
|===
|Keyword
|Input type
|Default value
|Description

|print_simple_chi_map_with_basins_to_csv
|bool
|false
|If true, prints a csv file with latitude, longitude and the chi coordinate, as well as basin and source information. Can be converted to a GeoJSON with the flag `convert_csv_to_geojson`. This options gives more flexibility in visualisation than the raster, since in the raster data points will only render as one pixel.

|print_basic_M_chi_map_to_csv
|bool
|false
|If true, prints a csv file with latitude, longitude and a host of chi information including the chi slope, chi intercept, drainage area, chi coordinate and other features of the drainage network. The stem:[M_{\chi}] values are calculated with a rudimentary smoothing window that has a size determined by the parameter `basic_Mchi_regression_nodes`.

|print_segmented_M_chi_map_to_csv
|bool
|false
|If true, prints a csv file with latitude, longitude and a host of chi information including the chi slope, chi intercept, drainage area, chi coordinate and other features of the drainage network. The stem:[M_{\chi}] values are calculated with the segmentation algorithm of http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/abstract[Mudd et al. 2014].

|print_segments
|bool
|false
|If true, this gives each segment a unique ID that is written to the `segmented_M_chi_map` (use `print_segmented_M_chi_map_to_csv: true`). 

|print_segments_raster
|bool
|false
|If true, this gives each segment a unique ID and prints to raster. *For this to work `print_segments` must be true.* We use this to map other landscape metrics, such as various hillslope metrics, to channel segments. 


|print_source_keys
|bool
|false
|If true, prints a csv file that prints the location of all the channel nodes with each of their source keys. The source keys are just the index into the source numbers: it lets you know which tributary each node belongs to. 

|print_sources_to_csv
|bool
|false
|This prints as csv that gives information about each of the sources in the DEM. Unless a channel heads csv is provided, these sources will be determined thought a drainage area threshold set by the `threshold_contributing_pixels` flag (default of 1000 pixels). 

|print_baselevel_keys
|bool
|false
|If true, prints a csv file that prints the location of all the channel nodes with each of their baselevel keys. The baselevel keys are just the index into the baselevel node (i.e., it tells you to which basin each node is connected). 

|===


==== Parameters for dealing with discharge rather than drainage area

These allow the user to drive chi with discharge rather than drainage area. It is somewhat rudimentary at the moment in that it  assumes the rainfall rate in length per time is translated into some constant discharge. This is not a hydrological model! It simply accumulates precipitation through a channel network with no regard to hydrological processes, infiltration and evaporation, or the timing of storms.

[cols="1,1,1,2", options="header"]
.Parameters for dealing with precipitation and discharge. 
|===
|Keyword
|Input type
|Default value
|Description

|precipitation_fname
|string
|NULL
|This is the name (without path or extension) of the precipitation file. There is not much error checking with this file! You *MUST* pass a file that is the same size as the topography raster!

|use_precipitation_raster_for_chi
|bool
|false
|When true, the program will use precipitation to generate a discharge raster and this will be used to calculate chi, rather than drainage area. 

|print_discharge_raster
|bool
|false
|When true, prints the discharge raster (a convolution of contributing area and precipitation).


|===


=== Example parameter files

We have a number of example parameter files in the repository https://github.com/LSDtopotools/LSDTT_chi_examples[LSDTT_chi_examples]. The chapter on examples will walk you through the various things these files do. 





