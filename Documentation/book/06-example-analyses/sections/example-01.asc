=== First example: Basic DEM steps and Basin selection

First we will do some very basic extraction of basins and visualisation of a region near Xi'an China, in the mountains containing https://en.wikipedia.org/wiki/Mount_Hua[Hua Shan]. 

If you have followed the steps in the section: <<Getting the software>>, the *chi mapping tool* will already be installed, and the example driver file will be in the `LSDTT_chi_examples` folder. 

. Navigate to the directory with the *chi mapping tool*:
+
[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTool_ChiMudd2014/driver_functions_MuddChi2014/
----
+
. Now run the example driver file. 
+
[source,console]
----
$ ./chi_mapping_tool.exe /LSDTopoTools/Topographic_projects/LSDTT_chi_examples Xian_example1.driver
----
+
In every *LSDTopoTools* analysis in these examples, there are three inputs: i) the name of the program (`./chi_mapping_tool.exe`) ii) the directory of the data (`/LSDTopoTools/Topographic_projects/LSDTT_chi_examples`) and iii) the name of the driver file (`Xian_example1.driver`). The extension of the driver file doesn't matter, you could call it `Xian_example1.rhinocerous` if you wanted.
+
. The important elements of the driver file are:
+
.. `test_drainage_boundaries: true` This is actually the default. We put it in the parameter file here to highlight its importance. The chi coordinate is calculated integrating drainage area along the channel so if your basin is truncated by the edge of the DEM it means that *your chi coordinate will be incorrect*. 
+
.. `write hillshade: true`. Does what is says on the tin. It means that you will print a hillshade raster. You really need to do this the first time you analyse a DEM (but you only need to do it once). The reason is that all your figures will look much nicer with a hillshade! 
+
. We are going to visualise the output using python. 
+
. In your host operating system, find the directory that contains the https://github.com/LSDtopotools/LSDMappingTools[LSDMappingTools] directory.
+
. You might want to open spyder (see the section: <<Getting our plotting tools>> on how to get this) to look at the python script. To open spyder simply type `spyder` into a powershell window (Windows)  or terminal (Linux/MaxOS).

==== Some comments on basin selection

In the *chi mapping tool*, we have several ways to select basins. We feel the default method is best (`find_complete_basins_in_window`). The options are:

* `find_complete_basins_in_window`: This goes through several refining steps. If first checks every basin in the raster and selects basins within a size window between `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then takes the resulting list of basins and removes any that are influenced by the edge of the DEM (to ensure drainage area of the basin is correct). Finally, it removes nested basins, so that in the end you have basins of approximately the same size, not influenced by the edge of the DEM, and with no nested basins. 
* `find_largest_complete_basins`: This is a somewhat old version that takes all basins draining to edge and works upstream from their outlets to find the largest subbasin that is not influenced by the edge. To get this to work you *MUST ALSO* set `find_complete_basins_in_window: false`. 
* `test_drainage_boundaries`: If either `find_complete_basins_in_window` or `find_largest_complete_basins` are `true` then this is ignored. If not, then it eliminates any basin that is influenced by the edge of the DEM. 
* `BaselevelJunctions_file`: If this points to a file that includes a series of integers that refer to junction indices, it will load these indices. If the file doesn't contain a series of integers the most likely result is that it will crash! 

=== Using our example scripts

Okay, why don't we look at some of the results. I would suggest opening *Spyder* in your host operating system for this. 

. In spyder, use *file->open* to open the plotting script for our examples called, innovatively, `ChiMappingExamples.py`. 
.. In your vagrant box this file is in `/LSDTopoTools/Git_projects/LSDMappingTools`.
.. In windows, if you have put your vagrant stuff in `C:\VagrantBoxes` then this file is in `C:\VagrantBoxes\LSDTopoTools\Git_projects\LSDMappingTools`.
.. In MacOS it will be wherever you put the VagrantBoxes folder and then in `/LSDTopoTools/Git_projects/LSDMappingTools`. 
.. You can run these scripts in your vagrant machine, but you will have to do the full python install there, and in addition you won't be able to use any graphical interface (like *spyder*) so our recommendation is for you to run visualisation scripts in your host operating system. 
+
+ In python, any lines between two blocks of `"""` symbols is a comment. In our program we put notes between these symbols. Don't change them. For example:
+
[source,python]
----
    """
    These lines tell the example functions where your files are. If you are using
    the recommended file setup you won't need to modify these lines. 
    
    If you have set up your own directory structure you will need to modify
    the directory names.
    """
----
+ 
The above lines just give you instructions. 
+
. In python, you can also make a line a comment with the `#` symbol. In these exercises you can uncomment lines by deleting the `#` symbol, and adding it back in again. Initially all but the first part of the first example is turned off:
+
[source,python]
----
    CME.ExampleOne_PartOne_SimpleHillshade(DataDirectory,Base_file)
    #CME.ExampleOne_PartTwo_PrintBasins(DataDirectory,Base_file)
    #CME.ExampleOne_PartThree_PrintBasinsWithLabels(DataDirectory,Base_file)
----
+ 
. To turn off example part one and turn on part two do this:
+
[source,python]
----
    #CME.ExampleOne_PartOne_SimpleHillshade(DataDirectory,Base_file)
    CME.ExampleOne_PartTwo_PrintBasins(DataDirectory,Base_file)
    #CME.ExampleOne_PartThree_PrintBasinsWithLabels(DataDirectory,Base_file)
----

=== Visualising example one data

We will now generate some figures to look at our data. 

==== Example one, part one: the hillshade  

. Make sure you've run the *chi mapping tool* first: <<First example: Basic DEM steps and Basin selection>>. 
. In *spyder* run the `ChiMappingExamples.py` with the first example turned on (i.e., no `#` in front of `CME.ExampleOne_PartOne_SimpleHillshade(DataDirectory,Base_file)`).
. This will create a png of this example DEM in your data folder called *Xian_example1.png*
. If you look at the code for this example (in `ChiVisualisation_Example01.py`) you should see a few basic options. You can change the figure size, the location of the colourbar, various labels, as well as the resolution of the figure (using the `dpi` keyword). The default format is *png* buy you can change that in the `MF.save_fig` command with `figure_format = "pdf"` (for example). We encourage you to play with the options to see what they do. 
+
.A hillshade of the example landscape
image::images/Xian_example1.png[Area around Mount_Hua]

==== Example one, part two: coloured basins

. Next turn on the second part of the example (`CME.ExampleOne_PartTwo_PrintBasins(DataDirectory,Base_file)`). This will show you the basins that have been algorithmically extracted:
+
.The extracted basins, coloured by basin number
image::images/Xian_coloured_basins.png[Basins around Mount_Hua]
+
. We have added a few more lines in this example script to show more options. For example you can change the colourmap (`cmap = plt.cm.jet`, but you could change to `cmap = plt.cm.cubehelix` for example), and later there are some options for the basin outlines.

==== Example one, part three: numbered basins

. Figuring out the basin numbers using a colourbar is inconvenient. If you turn on the third part of the example you will see text labels for each basin: 
+
.The extracted basins
image::images/Xian_basin_keys.png[Numbered basins around Mount_Hua]
+
. So now we have basin numbers. 
. You might notice that the basin numbers are somewhat randomly distributed. This is because we use a http://www.sciencedirect.com/science/article/pii/S0169555X12004618[very efficient algorithm] to compute the flow network and this algorithm does the numbering for us based on the connectivity of basins in the raster. To make this numbering more sensible to a human we need to manually rename them.

==== Example one, part four: renaming basins


