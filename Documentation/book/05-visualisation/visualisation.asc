== Visualisation

*LSDTopoTools* produces two main data types: raster data and point data. 
This chapter is a brief overview of ways to visualise these datasets. We go through some examples in the next chapter.

=== Using a GIS

* Raster data is output in ENVI bil format, which can be read by standard GIS software such as http://www.qgis.org/en/site/[QGIS] or https://www.arcgis.com/features/index.html[ArcMap]. 
* Point data is output as https://en.wikipedia.org/wiki/Comma-separated_values[csv] files. You can also choose to output these data as http://geojson.org/[geojson] files.
** To load csv files into a GIS, you will need to import them. Here are instructions http://www.qgistutorials.com/en/docs/importing_spreadsheets_csv.html[for QGIS] and for http://support.esri.com/technical-article/000012745[ArcMap]. In both cases you will need to tell your GIS what coordinate system the data is in. *LSDTopoTools* writes latitude and longitude to our csv files in the http://spatialreference.org/ref/epsg/wgs-84/[WGS84] geographic coordinate system.
** Geojson files are *huge* compared to csv files but they can be used for web mapping (e.g., https://d3js.org/[D3.js] or http://leafletjs.com/[leaflet]), and they are georeferences so can be loaded directly into a GIS using the "add vector data" functionality.

=== Using python

We have a number of visualisation scripts built using https://www.python.org/[python] and its packages http://www.numpy.org/[numpy], http://pandas.pydata.org/[pandas], and https://matplotlib.org/[matplotlib]. 

==== Setting up Python

IMPORTANT: Do not set up python in a vagrant server. Instead do it in your host operating system. The vagrant server is a stripped down version of Linux that cannot generate windows so you can have only limited functionality of these tools in a vagrant server. 

This is a quick guide. There are many options for setting up python but this is our preferred setup. 


. Download and install http://conda.pydata.org/miniconda.html[miniconda] on your host machine. 
. Open a command prompt (use the start menu to search for *cmd.exe*)
. Get our  https://raw.githubusercontent.com/LSDtopotools/LSDMappingTools/a1e4bd94911afc25a10ed2482553736bc2ce8894/environment.yml[environment file].
. Create the environment from that file with:
+
[source,console]
----
> conda env create -f environment.yml
----
+
I'm afraid this will take a little while. 
. Activate the environment:
+
[source,console]
----
> activate LSDTT
----

NOTE: This environment does not include *spyder*, you can install it with `conda install -n LSDTT spyder`

==== Doing this without the `environment.yml` file

NOTE: This is an alternative to the previous section!

. The best way to install python is http://conda.pydata.org/miniconda.html[miniconda]. Currently everything we use is tested on **Python 2.7**, so use the Python 2.7 installer. However, we have attempted to maintain compatibility to python 3.x. If you use that, it should be okay, but please report any bugs on the github page.  
+
WARNING: Our visualisation routines involve some computation, and dealing with geospatial data. This means that there are a number of packages to install. This might take some time. If you are already using python for something critical you may consider setting up a https://realpython.com/blog/python/python-virtual-environments-a-primer/[virtual] http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/[environment] to ensure all of these new packages don't break what you've already got. 
+
. Once you have installed  http://conda.pydata.org/miniconda.html[miniconda], you can go into a command prompt (windows) or terminal (MacOS and Linux) and get the other stuff you need. To get the command prompt in windows look for the *cmd.exe* program.
+
. You should create a python environment for *LSDTopoTools*. Read about https://conda.io/docs/user-guide/tasks/manage-environments.html[conda python environments here]:
+
[source,console]
----
> conda config --add channels conda-forge
> conda create --name LSDTT
> conda install -n LSDTT shapely
> conda install -n LSDTT fiona
> conda install -n LSDTT rasterio
> conda install -n LSDTT scipy
> conda install -n LSDTT matplotlib
> conda install -n LSDTT pandas
> conda install -n LSDTT gdal
> conda install -n LSDTT pyproj
> conda install -n LSDTT descartes
> conda install -n LSDTT spyder
> conda activate LSDTT
----
+
. Every time you use our tools, you should activate the *LSDTT* python environment. 
+
. To run spyder you just type `spyder` at the command line. 
+
WARNING: Spyder needs an older version of a package called *PyQt*. If spyder doesn't start correctly, run `conda install pyqt=4.10 -f`  
+
NOTE: It is entirely possible that we have forgotten some package, but if you run one of our scripts and it tells you the package is not found, just use `conda` to install.

==== Using Spyder

Once you have installed python, you can use it from the command line (i.e. from a powershell or terminal window). However, you might prefer using a nice development environment that checks your code and has pretty colours and reassuring windows. When we are not using text editors (see our section <<Text editors for modifying files>>) we tend to use Spyder, which has an editor that can give you help with python packages and highlight your mistakes. You should have already installed it with `conda install spyder`, so to get it running go into a powershell or terminal window and just type:

[source,console]
----
> spyder
----

IMPORTANT: You cannot run spyder on the vagrant machine since it has no windowing system. If you want to run *Spyder* you need to use your host operating system. This is the one of the reasons we encourage you to do your python installation on your host operating system and not the vagrant machine. 

==== Getting our plotting tools

Our vagrant setup has no graphic interface (you only interact with it through a terminal) so we suggest using your host operating system for python. 

. You need to clone our repository https://github.com/LSDtopotools/LSDMappingTools[LSDMappingTools]. 
+
WARNING: At the moment https://github.com/LSDtopotools/LSDMappingTools[LSDMappingTools] is a complete mess. It currently serves as a bit of a sandbox for visualisation development. One day we will clean it all up and make a nice, pretty release. But for now I'm afraid you'll need to rely on this repository. 
+
. If you don't want to install https://git-scm.com/[git] on your host operating system, you can clone the repository from your vagrant machine. Because of the clever way vagrant works you will be able to use these files in you host operating system.
+
[source,console]
----
$ cd /LSDTopoTools/Git_projects
$ git clone https://github.com/LSDtopotools/LSDMappingTools.git
----
+
NOTE: In your host operating system these files will not be in `/LSDTopoTools/Git_projects`. They will be within the `VagrantBoxes\LSDTopoTools\Git_projects` directory (wherever you put it. On windows I put mine in the `C` directory). 
+
. Once you have this repository you can move on to our examples in the next chapter.

==== Fixing python gdal in windows

If you are using windows, there is a stupid bug in the *conda* gdal package where it cannot find the gdal data. To fix this:

. Search for the file *gcs.csv*. Note the folder in which it is located. On my system it is in `C:\Miniconda2\Library\share\gdal`
. Go into the control panel, go to system (or system and security, then system), click on *advanced system settings* and in system variables enter a new variable: *GDAL_DATA*. For the value of this enter the directory where the gdal data is that you fond above.  
